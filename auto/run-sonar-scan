#!/bin/bash
set -euo pipefail

cd "$(dirname "$0")/.."

echo "-------------------- Running SonarQube Check --------------------"

SONAR_HOST_URL="http://localhost:9000"
PLATFORM_FLAG="--platform linux/amd64"

ARCH=$(uname -m)
echo "System Arch: $ARCH"

echo "Starting SonarQube Server..."
cd sonarqube
docker compose up -d sonarqube

MAX_WAIT=120
WAIT_TIME=0
while ! curl -f ${SONAR_HOST_URL} > /dev/null 2>&1; do
    if [ $WAIT_TIME -ge $MAX_WAIT ]; then
        echo "Error: SonarQube Server Start Timeout"
        docker compose down
        exit 1
    fi
    echo "   Waiting... ($WAIT_TIME/$MAX_WAIT seconds)"
    sleep 5
    WAIT_TIME=$((WAIT_TIME + 5))
done

echo "   SonarQube Successfully Started! Visit ${SONAR_HOST_URL}"

cd ..


echo "   Creating token..."
SONAR_TOKEN=$(curl -s -u admin:admin \
  -X POST "${SONAR_HOST_URL}/api/user_tokens/generate?name=ci-token-$(date +%s)" \
  | jq -r .token)

echo "🔍 Scanning Code..."

docker run \
    --rm \
    --network sonarqube_sonar-network \
    $PLATFORM_FLAG \
    -v "$(pwd):/usr/src" \
    -w /usr/src \
    -e SONAR_FORCEAUTHENTICATION=false \
    -e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true \
    sonar-scanner \
    -Dsonar.login="$SONAR_TOKEN"

echo "✅ Scanning Completed! Waiting for report to be indexed..."
echo "   Scan Report: ${SONAR_HOST_URL}/dashboard?id=comp30022-it-project"

# Get background task ID
TASK_ID=$(curl -s -u "$SONAR_TOKEN:" "$SONAR_HOST/api/ce/component?component=$PROJECT_KEY" \
  | jq -r '.queue[0].id')

# Poll until task complete
while true; do
  STATUS=$(curl -s -u "$SONAR_TOKEN:" "$SONAR_HOST/api/ce/task?id=$TASK_ID" | jq -r '.task.status')
  echo "Status: $STATUS"
  if [[ "$STATUS" == "SUCCESS" || "$STATUS" == "FAILED" ]]; then break; fi
  sleep 2
done

if [[ "$STATUS" != "SUCCESS" ]]; then
  echo "❌ Analysis failed!"
  exit 1
fi

analysisId=$(curl -s -u "$SONAR_TOKEN:" "$SONAR_HOST/api/ce/task?id=$ceTaskId" \
  | jq -r '.task.analysisId')

curl -s -u "$SONAR_TOKEN:" "$SONAR_HOST/api/qualitygates/project_status?analysisId=$analysisId" \
  | tee "quality_gate.json"

curl -s -u "$SONAR_TOKEN:" "$SONAR_HOST/api/measures/component?component=$PROJECT_KEY&metricKeys=bugs,vulnerabilities,code_smells,coverage,duplicated_lines_density" \
  | tee "measures.json"

curl -s -u "$SONAR_TOKEN:" "$SONAR_HOST/api/issues/search?componentKeys=$PROJECT_KEY&p=1&ps=500" \
  | tee "issues.json"

echo "✅ All reports are saved："
echo " - quality_gate.json"
echo " - measures.json"
echo " - issues.json"


# Get analysisId
ANALYSIS_ID=$(curl -s -u "$SONAR_TOKEN:" "$SONAR_HOST/api/ce/task?id=$TASK_ID" | jq -r '.task.analysisId')

# Get reports
mkdir -p sonar-report

curl -s -u "$SONAR_TOKEN:" "$SONAR_HOST/api/qualitygates/project_status?analysisId=$ANALYSIS_ID" \
  > sonar-report/quality_gate.json

curl -s -u "$SONAR_TOKEN:" "$SONAR_HOST/api/measures/component?component=$PROJECT_KEY&metricKeys=bugs,vulnerabilities,code_smells,coverage,duplicated_lines_density" \
  > sonar-report/measures.json

curl -s -u "$SONAR_TOKEN:" "$SONAR_HOST/api/issues/search?componentKeys=$PROJECT_KEY&ps=500" \
  > sonar-report/issues.json

echo "✅ Sonar reports saved to ./sonar-report/"

#echo "🧹 Cleaning up..."
#cd sonarqube
#docker compose down
#echo "✅ SonarQube is stopped"
