name: Run E2E Test on AWS ECS

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: "Type YES to confirm deployment"
        required: true
        default: "NO"
  push:
    branches:
      - remove-alb

permissions:
  id-token: write
  contents: read

jobs:
#  deploy-infra:
#    runs-on: ubuntu-22.04
#    if: startsWith(github.ref, 'refs/heads/release/') && github.event.inputs.confirm == 'YES'
#    outputs:
#      vpc_id: ${{ steps.outputs.outputs.vpc_id }}
#      public_subnets: ${{ steps.outputs.outputs.public_subnets }}
#      cluster_arn: ${{ steps.outputs.outputs.cluster_arn }}
#      execution_role_arn: ${{ steps.outputs.outputs.execution_role_arn }}
#      ecs_security_group_id: ${{ steps.outputs.outputs.ecs_security_group_id }}
#    steps:
#      - uses: actions/checkout@v4
#
#      - name: Configure AWS credentials via OIDC
#        uses: aws-actions/configure-aws-credentials@v2
#        with:
#          role-to-assume: ${{ secrets.AWS_GITHUB_ACTION_DEPLOY_ROLE_ARN }}
#          aws-region: ${{ secrets.AWS_REGION }}
#          audience: sts.amazonaws.com
#
#      - name: Terraform Deploy Infra
#        run: |
#          cd infra/test/aws
#          terraform init
#          terraform plan
#          terraform apply -auto-approve
#
#      - name: Save Terraform Infra state
#        if: always()
#        uses: actions/upload-artifact@v4
#        with:
#          name: terraform-infra.tfstate
#          path: infra/test/aws/terraform.tfstate
#
#      - name: Get Terraform Outputs
#        id: outputs
#        run: |
#          cd infra/test/aws
#          echo "vpc_id=$(terraform output -raw vpc_id)" >> $GITHUB_OUTPUT
#          echo "public_subnets=$(terraform output -json public_subnets)" >> $GITHUB_OUTPUT
#          echo "cluster_arn=$(terraform output -raw cluster_arn)" >> $GITHUB_OUTPUT
#          echo "execution_role_arn=$(terraform output -raw execution_role_arn)" >> $GITHUB_OUTPUT
#          # Assuming the output returns a list, and we need the first one.
#          echo "ecs_security_group_id=$(terraform output -json security_group_ids | jq -r '''.[0]''')" >> $GITHUB_OUTPUT

  deploy-app:
    runs-on: ubuntu-22.04
    #if: startsWith(github.ref, 'refs/heads/release/') && github.event.inputs.confirm == 'YES'
    outputs:
      task_public_ip: ${{ steps.outputs.outputs.task_public_ip }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials (admin, temporary)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_GITHUB_ACTION_DEPLOY_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
          audience: sts.amazonaws.com

      - name: Terraform Deploy App
        run: |
          cd deploy/test/aws
          terraform init
          terraform plan
          terraform apply -auto-approve

      - name: Save Terraform App state
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: terraform-app.tfstate
          path: deploy/test/aws/terraform.tfstate

      - name: Get Task Public IP
        id: outputs
        run: |
          cd deploy/test/aws
          TASK_IP=$(terraform output -raw task_public_ip)
          echo "task_public_ip=$TASK_IP" >> $GITHUB_OUTPUT
          echo "ECS Task Public IP: $TASK_IP"

  run-e2e-test:
    runs-on: ubuntu-22.04
    needs: [deploy-app]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Docker Environment
        run: |
          ./auto/install-github-action-env

      - name: Test ECS connectivity
        run: |
          echo "Testing ECS Public IP: ${{ needs.deploy-app.outputs.task_public_ip }}"
          # Wait for the service to be fully ready
          sleep 30
          curl -I "http://${{ needs.deploy-app.outputs.task_public_ip }}" || exit 1

      - name: Run Cypress E2E Test on ECS
        run: |
          auto/build-frontend-dev
          auto/run-e2e-tests-on-deployed-app "${{ needs.deploy-app.outputs.task_public_ip }}"

      - name: Upload Cypress Screenshots
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-screenshots
          path: frontend/cypress/screenshots

  post-deploy-destroy-resources:
    runs-on: ubuntu-22.04
    if: always()
    needs: run-e2e-test
    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials via OIDC
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_GITHUB_ACTION_DEPLOY_ROLE_ARN }}
        aws-region: ${{ secrets.AWS_REGION }}
        audience: sts.amazonaws.com

    - name: Download App tfstate
      if: always()
      uses: actions/download-artifact@v4
      with:
        name: terraform-app.tfstate
        path: deploy/test/aws

    - name: Terraform Destroy App
      if: always()
      run: |
        cd deploy/test/aws
        terraform init
        terraform plan
        terraform destroy -auto-approve

#    - name: Download Infra tfstate
#      if: always()
#      uses: actions/download-artifact@v4
#      with:
#        name: terraform-infra.tfstate
#        path: infra/test/aws
#
#    - name: Terraform Destroy Infra
#      if: always()
#      run: |
#        cd infra/test/aws
#        terraform init
#        terraform plan
#        terraform destroy -auto-approve
