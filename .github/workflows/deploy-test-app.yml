name: Deploy Test Environment to AWS ECS (Fargate Spot)

on:
  push:
    branches:
      - "deploy-app-staging"

jobs:
  bootstrap-iam-role:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials (admin, temporary)
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Check if IAM Role exists
      id: check_iam
      run: |
        if aws iam get-role --role-name github-action-deploy-role 2>/dev/null; then
          echo "ROLE_EXISTS=true" >> $GITHUB_ENV
        else
          echo "ROLE_EXISTS=false" >> $GITHUB_ENV
        fi

    - name: Terraform Init + Plan + Apply (IAM Role only)
      if: env.ROLE_EXISTS == 'false'
      run: |
        cd infra/modules/github-actions-oidc-role/aws/iam-test
        terraform init
        terraform plan
        terraform apply -auto-approve

  deploy-test-app-to-aws-ecs-fargate:
    runs-on: ubuntu-22.04
    needs: bootstrap-iam-role
    permissions:
      contents: read
      id-token: write
    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials via OIDC
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_GITHUB_ACTION_DEPLOY_ROLE_ARN }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Terraform Init + Plan + Apply (full infra)
      run: |
        cd infra/test/aws
        terraform init
        terraform plan
        terraform apply -auto-approve

    - name: Output ALB
      run: |
        cd infra/aws/test
        echo "ALB: $(../.. /auto/run-terraform output -raw alb_dns)"

#    - name: Terraform Destroy IAM
#      if: always()
#      run: |
#        cd infra/modules/github-actions-oidc-role/aws/iam-test
#        terraform destroy
