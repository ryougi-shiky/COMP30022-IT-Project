name: Deploy Test Environment to AWS ECS (Fargate Spot)

on:
  push:
    branches:
      - "deploy-app-staging"

jobs:
  bootstrap-iam-role:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials (admin, temporary)
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Check if IAM Role exists
      id: check_iam
      run: |
        if aws iam get-role --role-name github-action-deploy-role 2>/dev/null; then
          echo "ROLE_EXISTS=true" >> $GITHUB_ENV
        else
          echo "ROLE_EXISTS=false" >> $GITHUB_ENV
        fi

    - name: Terraform Creating IAM Role
      run: |
        cd infra/modules/github-actions-oidc-role/aws/iam-test
        terraform init
        terraform plan
        terraform apply -auto-approve

    - name: Save Terraform state
      uses: actions/upload-artifact@v4
      with:
        name: terraform.tfstate
        path: infra/modules/github-actions-oidc-role/aws/iam-test/terraform.tfstate


  deploy-test-app-to-aws-ecs-fargate:
    runs-on: ubuntu-22.04
    needs: bootstrap-iam-role
    permissions:
      contents: read
      id-token: write
    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials via OIDC
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_GITHUB_ACTION_DEPLOY_ROLE_ARN }}
        aws-region: ${{ secrets.AWS_REGION }}
        audience: sts.amazonaws.com

    - name: Terraform Deploy App
      run: |
        cd infra/test/aws
        terraform init
        terraform plan
        terraform apply \
          -var "docker_hub_username=${{ secrets.DOCKER_HUB_USERNAME }}" \
          -var "docker_hub_password=${{ secrets.DOCKER_HUB_PASSWORD }}" \
          -auto-approve

    - name: Output ALB
      run: |
        cd infra/aws/test
        echo "ALB: $(../.. /auto/run-terraform output -raw alb_dns)"

  post-deploy-destroy-resources:
    runs-on: ubuntu-22.04

    needs:
      - deploy-test-app-to-aws-ecs-fargate
      - bootstrap-iam-role

    if: always()

    permissions:
      contents: read
      id-token: write

    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials (admin, temporary)
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Download Terraform state
      uses: actions/download-artifact@v4
      with:
        name: terraform.tfstate
        path: infra/modules/github-actions-oidc-role/aws/iam-test

    - name: Terraform Destroy IAM
      run: |
        cd infra/modules/github-actions-oidc-role/aws/iam-test
        terraform init
        terraform plan
        terraform destroy -auto-approve
